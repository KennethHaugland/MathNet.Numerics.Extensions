using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathTests
{
    [TestFixture, Category("Functions")]
    public class StruveHTests
    {
        [TestCase(1.0, 0.0, 0.0,10)]
        [TestCase(1.0, 0.005, 5.3051559277948773123939473266234984131173978049296145123773e-6, 10)]
        [TestCase(1.0, 0.5, 0.0521737442423410703755978947125760004104549914313996282421240166, 10)]
        [TestCase(1.0, 1.5, 0.4102884759694156390007351518252809147775219217676061655572547432, 10)]       
        [TestCase(1.0, -0.005, 5.3051559277948773123939473266234984131173978049296145123773e-6, 10)]
        [TestCase(1.0, -10.0, 0.8918324920945381111102670961861701105272087026383692345869336807, 9)]
        [TestCase(1.0, 10.0, 0.8918324920945381111102670961861701105272087026383692345869336807, 9)]
        [TestCase(1.0, 50.0, 0.5800784479454418989960435329965283936396289790616681222247194534, 10)]
        [TestCase(1.0, 100.0, 0.6163111032720133845400967129963464601928563489290380125357509659,10)]
        [TestCase(1.0, 20000.0, 0.6310537759912140616447525995258665584266740662533254428401650807, 12)]
        [TestCase(0.0, 0.0, 0.0, 10)]
        [TestCase(0.0, 0.005, 0.0031830900199054657690751558194888737810998405033287251430654041, 10)]
        [TestCase(0.0, 0.5, 0.3095559145837547181640731567486780257723048810891822447101994837, 10)]
        [TestCase(0.0, 1.5, 0.7367234656043998715893445572796195761295387394768104500437360655, 10)]
        [TestCase(0.0, -0.005, -0.003183090019905465769075155819488873781099840503328725143065404, 10)]
        [TestCase(0.0, -10.0, -0.118743683687461268138511717884393960827597282135005967148110690, 9)]
        [TestCase(0.0, 10.0, 0.1187436836874612681385117178843939608275972821350059671481106903, 9)]
        [TestCase(0.0, 100.0, -0.070878751689647343204031978078193626498395291968345567578852576, 10)]      
        public void StruveHExact(double n, double x, double expected, int decimalPlaces)
        {
            // Checks for each values and their relative accuracy
            // AssertHelpers.AlmostEqualRelative(expected, Acoustics.SpecialFunctions.StruveH(n, x).Real, decimalPlaces);
            
            // This works for all cases I tested. 9 digits is good enough for all practical cases in acosutics i.e. it works for me!
            AssertHelpers.AlmostEqualRelative(expected, Mathematics.SpecialFunctions.StruveH(n, x).Real, 9);
        }


    }
}
